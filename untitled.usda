#usda 1.0
(
    defaultPrim = "untitled"
    endTimeCode = 199.99
    startTimeCode = 0
    timeCodesPerSecond = 200
    upAxis = "Y"
)

def Xform "untitled"
{
    def Scope "Materials"
    {
        def Material "material0"
        {
            token outputs:surface.connect = </untitled/Materials/material0/pbr_shader.outputs:surface>

            def Shader "uvset0"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st0"
                float2 outputs:result
            }

            def Shader "tex_emissive"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @0/image0_lin.jpg@
                float2 inputs:st.connect = </untitled/Materials/material0/uvset0.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                color3f outputs:rgb
            }

            def Shader "tex_opacity"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @0/image0_unlit_a.png@
                float2 inputs:st.connect = </untitled/Materials/material0/uvset0.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:a
                color3f outputs:rgb
            }

            def Shader "pbr_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </untitled/Materials/material0/tex_opacity.outputs:rgb>
                color3f inputs:emissiveColor.connect = </untitled/Materials/material0/tex_emissive.outputs:rgb>
                float inputs:metallic = 0
                float inputs:opacity.connect = </untitled/Materials/material0/tex_opacity.outputs:a>
                float inputs:roughness = 1
                token outputs:surface
            }
        }
    }

    def Xform "scene0"
    {
        float3 xformOp:scale = (100, 100, 100)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def Xform "node0"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "node1"
            {
                float3 xformOp:scale.timeSamples = {
                    0: (1, 1, 1),
                    33.32333333333334: (1, 1, 1),
                    33.333333333333336: (0.001, 0.001, 0.001),
                    66.66666666666667: (0.001, 0.001, 0.001),
                    100: (0.001, 0.001, 0.001),
                    133.33333333333334: (0.001, 0.001, 0.001),
                    166.66666666666669: (0.001, 0.001, 0.001),
                    200: (0.001, 0.001, 0.001),
                }
                uniform token[] xformOpOrder = ["xformOp:scale"]

                def Mesh "mesh0"
                {
                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, 0, -1), (1, 0, 1)]
                    int[] faceVertexCounts = [3, 3]
                    int[] faceVertexIndices = [0, 1, 2, 3, 2, 1]
                    rel material:binding = </untitled/Materials/material0>
                    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                        interpolation = "vertex"
                    )
                    point3f[] points = [(-1, 0, -1), (-1, 0, 1), (1, 0, -1), (1, 0, 1)]
                    texCoord2f[] primvars:st0 = [(0, 1), (0, 0), (0.16666667, 1), (0.16666667, 0)] (
                        interpolation = "vertex"
                    )
                    uniform token subdivisionScheme = "none"
                }
            }

            def Xform "node2"
            {
                float3 xformOp:scale.timeSamples = {
                    0: (0.001, 0.001, 0.001),
                    33.32333333333334: (0.001, 0.001, 0.001),
                    33.333333333333336: (1, 1, 1),
                    66.65666666666667: (1, 1, 1),
                    66.66666666666667: (0.001, 0.001, 0.001),
                    100: (0.001, 0.001, 0.001),
                    133.33333333333334: (0.001, 0.001, 0.001),
                    166.66666666666669: (0.001, 0.001, 0.001),
                    200: (0.001, 0.001, 0.001),
                }
                uniform token[] xformOpOrder = ["xformOp:scale"]

                def Mesh "mesh1"
                {
                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, 0, -1), (1, 0, 1)]
                    int[] faceVertexCounts = [3, 3]
                    int[] faceVertexIndices = [0, 1, 2, 3, 2, 1]
                    rel material:binding = </untitled/Materials/material0>
                    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                        interpolation = "vertex"
                    )
                    point3f[] points = [(-1, 0, -1), (-1, 0, 1), (1, 0, -1), (1, 0, 1)]
                    texCoord2f[] primvars:st0 = [(0.16666667, 1), (0.16666667, 0), (0.33333334, 1), (0.33333334, 0)] (
                        interpolation = "vertex"
                    )
                    uniform token subdivisionScheme = "none"
                }
            }

            def Xform "node3"
            {
                float3 xformOp:scale.timeSamples = {
                    0: (0.001, 0.001, 0.001),
                    33.333333333333336: (0.001, 0.001, 0.001),
                    66.65666666666667: (0.001, 0.001, 0.001),
                    66.66666666666667: (1, 1, 1),
                    99.99: (1, 1, 1),
                    100: (0.001, 0.001, 0.001),
                    133.33333333333334: (0.001, 0.001, 0.001),
                    166.66666666666669: (0.001, 0.001, 0.001),
                    200: (0.001, 0.001, 0.001),
                }
                uniform token[] xformOpOrder = ["xformOp:scale"]

                def Mesh "mesh2"
                {
                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, 0, -1), (1, 0, 1)]
                    int[] faceVertexCounts = [3, 3]
                    int[] faceVertexIndices = [0, 1, 2, 3, 2, 1]
                    rel material:binding = </untitled/Materials/material0>
                    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                        interpolation = "vertex"
                    )
                    point3f[] points = [(-1, 0, -1), (-1, 0, 1), (1, 0, -1), (1, 0, 1)]
                    texCoord2f[] primvars:st0 = [(0.33333334, 1), (0.33333334, 0), (0.5, 1), (0.5, 0)] (
                        interpolation = "vertex"
                    )
                    uniform token subdivisionScheme = "none"
                }
            }

            def Xform "node4"
            {
                float3 xformOp:scale.timeSamples = {
                    0: (0.001, 0.001, 0.001),
                    33.333333333333336: (0.001, 0.001, 0.001),
                    66.66666666666667: (0.001, 0.001, 0.001),
                    99.99: (0.001, 0.001, 0.001),
                    100: (1, 1, 1),
                    133.32333333333335: (1, 1, 1),
                    133.33333333333334: (0.001, 0.001, 0.001),
                    166.66666666666669: (0.001, 0.001, 0.001),
                    200: (0.001, 0.001, 0.001),
                }
                uniform token[] xformOpOrder = ["xformOp:scale"]

                def Mesh "mesh3"
                {
                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, 0, -1), (1, 0, 1)]
                    int[] faceVertexCounts = [3, 3]
                    int[] faceVertexIndices = [0, 1, 2, 3, 2, 1]
                    rel material:binding = </untitled/Materials/material0>
                    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                        interpolation = "vertex"
                    )
                    point3f[] points = [(-1, 0, -1), (-1, 0, 1), (1, 0, -1), (1, 0, 1)]
                    texCoord2f[] primvars:st0 = [(0.5, 1), (0.5, 0), (0.6666667, 1), (0.6666667, 0)] (
                        interpolation = "vertex"
                    )
                    uniform token subdivisionScheme = "none"
                }
            }

            def Xform "node5"
            {
                float3 xformOp:scale.timeSamples = {
                    0: (0.001, 0.001, 0.001),
                    33.333333333333336: (0.001, 0.001, 0.001),
                    66.66666666666667: (0.001, 0.001, 0.001),
                    100: (0.001, 0.001, 0.001),
                    133.32333333333335: (0.001, 0.001, 0.001),
                    133.33333333333334: (1, 1, 1),
                    166.6566666666667: (1, 1, 1),
                    166.66666666666669: (0.001, 0.001, 0.001),
                    200: (0.001, 0.001, 0.001),
                }
                uniform token[] xformOpOrder = ["xformOp:scale"]

                def Mesh "mesh4"
                {
                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, 0, -1), (1, 0, 1)]
                    int[] faceVertexCounts = [3, 3]
                    int[] faceVertexIndices = [0, 1, 2, 3, 2, 1]
                    rel material:binding = </untitled/Materials/material0>
                    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                        interpolation = "vertex"
                    )
                    point3f[] points = [(-1, 0, -1), (-1, 0, 1), (1, 0, -1), (1, 0, 1)]
                    texCoord2f[] primvars:st0 = [(0.6666667, 1), (0.6666667, 0), (0.8333333, 1), (0.8333333, 0)] (
                        interpolation = "vertex"
                    )
                    uniform token subdivisionScheme = "none"
                }
            }

            def Xform "node6"
            {
                float3 xformOp:scale.timeSamples = {
                    0: (0.001, 0.001, 0.001),
                    33.333333333333336: (0.001, 0.001, 0.001),
                    66.66666666666667: (0.001, 0.001, 0.001),
                    100: (0.001, 0.001, 0.001),
                    133.33333333333334: (0.001, 0.001, 0.001),
                    166.6566666666667: (0.001, 0.001, 0.001),
                    166.66666666666669: (1, 1, 1),
                    199.99: (1, 1, 1),
                    200: (0.001, 0.001, 0.001),
                }
                uniform token[] xformOpOrder = ["xformOp:scale"]

                def Mesh "mesh5"
                {
                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, 0, -1), (1, 0, 1)]
                    int[] faceVertexCounts = [3, 3]
                    int[] faceVertexIndices = [0, 1, 2, 3, 2, 1]
                    rel material:binding = </untitled/Materials/material0>
                    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                        interpolation = "vertex"
                    )
                    point3f[] points = [(-1, 0, -1), (-1, 0, 1), (1, 0, -1), (1, 0, 1)]
                    texCoord2f[] primvars:st0 = [(0.8333333, 1), (0.8333333, 0), (1, 1), (1, 0)] (
                        interpolation = "vertex"
                    )
                    uniform token subdivisionScheme = "none"
                }
            }
        }
    }
}

